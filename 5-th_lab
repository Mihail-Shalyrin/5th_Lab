 // 1- rst 2-ND TASK
        static int treygolniki(int a, int b, int c)
        {
            int p1 = (a + b + c) / 2;
            int S_1 = (int)Math.Sqrt(p1 * (p1 - a) * (p1 - b) * (p1 - c));
            return S_1;

        }
       
        static void Main(string[] args)
        {
            int l = treygolniki(20, 40, 25);
            int l2 = treygolniki(40, 20, 10);
            if (l > l2)
            {
                Console.WriteLine("площадь 2 треугольника больше");
            }
            else
            {
                Console.WriteLine("плошадь 1 треугольника больше");
            }

        }
        
        
        
        //2-nd part 10-th task
        static void zapolnenie(int[,] x)
        {
            Random r = new Random();
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(1); j++)
                {
                    x[i, j] = r.Next(-30, 30);
                }
            }
        }
        static int z(int[,] x)
        {
            int max = x[0, 0];
            int imax = 0;
            for (int i = 0; i < x.GetLength(0); i++)
            {
                if (x[i, i] > max)
                {
                    max = x[i, i];
                    imax = i;
                }
            }
            //нижняя диоганаль
            int l = 1;
            for (int i = 1; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(0) - l; j++)
                {
                    if (x[j + i, i] > max)
                    {
                        max = x[j + i, j];
                        imax = j;
                    }
                }
                l += 1;
                if (l == 3)
                {
                    break;
                }
            }
            return imax;
        }
        static int za(int[,] x)
        {
            //верхняя часть
            int xmin = x[0, 0];
            int ixmin = 0;
            for (int i = 0; i < x.GetLength(0); i++)
            {
                if (x[i, i] < xmin)
                {
                    xmin = x[i, i];
                    ixmin = i;
                }
            }
            int ljx_2 = 1;
            for (int i = 1; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(1) - ljx_2; j++)
                {
                    if (x[j + i, j] < xmin)
                    {
                        xmin = (x[j, j + i]);
                        ixmin = j + i;
                    }
                }
                ljx_2 += 1;
                if (ljx_2 == 3)
                {
                    break;
                }
            }
            return ixmin;
        }
        static int[,] udalenie_strok(int amax, int amin, int[,] x)
        {
            if (amax == amin)
            {
                int[,] New_array1 = new int[x.GetLength(0), x.GetLength(1) - 1];
                for (int i = amax; i < x.GetLength(0) - 1; i++)
                {
                    for (int j = 0; j < x.GetLength(1); j++)
                    {
                        x[j, i] = x[j, i + 1];

                    }
                }
                for (int i = 0; i < x.GetLength(0); i++)
                {
                    for (int j = 0; j < x.GetLength(1) - 2; j++)
                    {
                        New_array1[i, j] = x[i, j];
                    }
                }
                return New_array1;
            }
            else
            {

                int[,] New_array = new int[x.GetLength(0), x.GetLength(1) - 2];
                for (int i = amax; i < x.GetLength(0) - 1; i++)
                {
                    for (int j = 0; j < x.GetLength(1); j++)
                    {
                        x[j, i] = x[j, i + 1];

                    }
                }
                for (int i = amin; i < x.GetLength(0) - 1; i++)
                {
                    for (int j = 0; j < x.GetLength(1); j++)
                    {
                        x[j, i] = x[j, i + 1];
                    }
                }
                for (int i = 0; i < x.GetLength(0); i++)
                {
                    for (int j = 0; j < x.GetLength(1) - 2; j++)
                    {
                        New_array[i, j] = x[i, j];
                    }
                }
                return New_array;
            }
        }

        static void Main(string[] args)
        {
            //2 часть 10 номер

            string s = Console.ReadLine();
            int n;
            int.TryParse(s, out n);
            int[,] l = new int[n, n];
            if (n < 3)
            {
                Console.WriteLine("Введите большее кол-во");
                return;
            }
            zapolnenie(l);
            Console.WriteLine(" Вывод исходной матрицы");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(l[i, j] + " ");
                }
                Console.WriteLine();
            }
            Console.WriteLine("Вывод отредактированной");
            int[,] New_array = udalenie_strok(z(l), za(l), l);
            for (int i = 0; i < New_array.GetLength(0); i++)
            {
                for (int j = 0; j < New_array.GetLength(1); j++)
                {
                    Console.Write(New_array[i, j] + " ");
                }
                Console.WriteLine();
            }
            Console.ReadLine();
        }
        
        
         //2-nd part 23-th task
        static void random(int[,] L)
        {
            Random r = new Random();
            for (int i = 0; i < L.GetLength(0); i++)
            {
                for (int j = 0; j < L.GetLength(1); j++)
                {
                    L[i, j] = r.Next(-40, 40);
                }
            }
        }
        static void SEPOR(int[] l, int f, int[,] M)
        {
            for (int i = 0; i < l.Length - 1; i++)
            {
                int amin = l[i];
                int imin = i;
                for (int j = i + 1; j < l.Length; j++)
                {
                    if (l[j] < amin)
                    {
                        amin = l[j];
                        imin = j;
                    }
                }
                l[imin] = l[i];
                l[i] = amin;


            }
            for (int i = 0; i < l.Length; i++)
            {
                M[f, i] = l[i];
            }
        }
        static void ymnochenie(int[,] x)
        {
            for (int i = 0; i < x.GetLength(0); i++)
            {
                for (int j = 0; j < x.GetLength(1) - 1; j++)
                {
                    x[i, j] = x[i, j] / 2;
                }
            }
            for (int i = x.GetLength(1) - 1; i < x.GetLength(1); i++)
            {
                for (int j = 0; j < x.GetLength(0); j++)
                {
                    x[j, i] = x[j, i] * 2;
                }
            }
        }

        static void Main(string[] args)
        {
            int n;
            string s = Console.ReadLine();
            int.TryParse(s, out n);
            int[,] F = new int[n, n];
            random(F);
            Console.WriteLine("Вывод изначального упорядоченного массива");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(F[i, j] + " ");
                }
                Console.WriteLine();
            }
            //редактирование
            int[] ML = new int[n];
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    ML[j] = F[i, j];
                }
                SEPOR(ML, i, F);

            }
            ymnochenie(F);
            Console.WriteLine("Вывод после обработки");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    Console.Write(F[i, j] + " ");
                }
                Console.WriteLine();
            }
            Console.Read();

        }
